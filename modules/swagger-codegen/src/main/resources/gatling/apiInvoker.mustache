{{>licenseInfo}}
package {{invokerPackage}}

import io.gatling.core.Predef._
import io.gatling.http.Predef._

import java.io.File
import java.net.URLEncoder
import java.util.Date
import java.text.SimpleDateFormat

import scala.collection.JavaConverters._
import scala.collection.mutable.HashMap

import com.fasterxml.jackson.module.scala.DefaultScalaModule
import com.fasterxml.jackson.datatype.joda.JodaModule
import com.fasterxml.jackson.core.JsonGenerator.Feature
import com.fasterxml.jackson.databind._
import com.fasterxml.jackson.annotation._
import com.fasterxml.jackson.databind.annotation.JsonSerialize

object ScalaJsonUtil {
  def getJsonMapper = {
    val mapper = new ObjectMapper()
    mapper.registerModule(new DefaultScalaModule())
    mapper.registerModule(new JodaModule());
    mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
    mapper.setSerializationInclusion(JsonInclude.Include.NON_DEFAULT)
    mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)
    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)
    mapper.setSerializationInclusion(JsonInclude.Include.NON_EMPTY)
    mapper.setPropertyNamingStrategy(
        PropertyNamingStrategy.CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES
    )
    mapper
  }
}

class ApiInvoker(val mapper: ObjectMapper = ScalaJsonUtil.getJsonMapper,
                 httpHeaders: HashMap[String, String] = HashMap(),
                 // hostMap: HashMap[String, Client] = HashMap(),
                 asyncHttpClient: Boolean = false,
                 authScheme: String = "",
                 authPreemptive: Boolean = false) {

  var defaultHeaders: HashMap[String, String] = httpHeaders

  def escape(value: String): String = {
    // do not escape "${...}" to not interfere with expressions
    if (value.startsWith("${") && value.endsWith("}")) {
      value
    } else {
      URLEncoder.encode(value, "utf-8").replaceAll("\\+", "%20")
    }
  }

  def escape(value: Long): String = value.toString
  def escape(value: Double): String = value.toString
  def escape(value: Float): String = value.toString

  def deserialize(json: String, containerType: String, cls: Class[_]) = {
    if (cls == classOf[String]) {
      json match {
        case s: String => {
          if (s.startsWith("\"") && s.endsWith("\"") && s.length > 1) s.substring(1, s.length - 1)
          else s
        }
        case _ => null
      }
    } else {
      containerType.toLowerCase match {
        case "array" => {
          val typeInfo = mapper.getTypeFactory().constructCollectionType(classOf[java.util.List[_]], cls)
          val response = mapper.readValue(json, typeInfo).asInstanceOf[java.util.List[_]]
          response.asScala.toList
        }
        case "list" => {
          val typeInfo = mapper.getTypeFactory().constructCollectionType(classOf[java.util.List[_]], cls)
          val response = mapper.readValue(json, typeInfo).asInstanceOf[java.util.List[_]]
          response.asScala.toList
        }
        case _ => {
          json match {
            case e: String if ("\"\"" == e) => null
            case _ => mapper.readValue(json, cls)
          }
        }
      }
    }
  }

  def serializeQueryParam(obj: Any): String = {
    if (obj != null) {
      obj match {
        case e: java.util.Date => new SimpleDateFormat("yyyy-MM-dd").format(e)
        case e => e.toString()
      }
    } else null
  }

  def serialize(obj: AnyRef): String = {
    if (obj != null) {
      obj match {
        case e: List[_] => mapper.writeValueAsString(obj.asInstanceOf[List[_]].asJava)
        case _ => mapper.writeValueAsString(obj)
      }
    } else null
  }

  def invokeApi(requestName: String, host: String, path: String, method: String, queryParams: Map[String, String], formParams: Map[String, String], body: AnyRef, headerParams: Map[String, String], contentType: String): io.gatling.http.request.builder.HttpRequestBuilder = {
    method match {
      case "POST" => {
        http(requestName)
          .httpRequest(method, host + path)
          .queryParamSeq(queryParams.toSeq)
          .headers(defaultHeaders.toMap)
          .headers(headerParams.toMap)
          .header("Authorization", "Bearer ${token}")
          .body(StringBody(serialize(body)))
          .asJSON
      }
      case _ => {
        http(requestName)
          .httpRequest(method, host + path)
          .queryParamSeq(queryParams.toSeq)
          .headers(defaultHeaders.toMap)
          .headers(headerParams.toMap)
          .header("Authorization", "Bearer ${token}")
          .asJSON
      }
    }
  }
}

object ApiInvoker extends ApiInvoker(mapper = ScalaJsonUtil.getJsonMapper,
  httpHeaders = HashMap(),
  // hostMap = HashMap(),
  asyncHttpClient = {{asyncHttpClient}},
  authScheme = "{{authScheme}}",
  authPreemptive = {{authPreemptive}})

class ApiException(val code: Int, msg: String) extends RuntimeException(msg)
