{{>licenseInfo}}
package {{package}}

{{#imports}}import {{import}}
{{/imports}}
import {{invokerPackage}}.ApiInvoker
import {{invokerPackage}}.ApiException

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap
import io.gatling.core.Predef._
import io.gatling.http.Predef._
import io.gatling.core.check.ValidatorCheckBuilder
import io.gatling.http.check.HttpCheck
import io.gatling.http.response.Response

{{#operations}}
class {{classname}}(val defBasePath: String = "{{basePath}}",
                        defApiInvoker: ApiInvoker = ApiInvoker) {
  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value 
  {{#operation}}

  /**
   * {{summary}}
   * {{notes}}
{{#allParams}}   * @param {{paramName}} {{description}} {{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
{{/allParams}}   * @return {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}
   */
  def {{operationId}} ({{#allParams}}{{paramName}}: {{dataType}}{{#defaultValue}} /* = {{{defaultValue}}} */{{/defaultValue}}{{#hasMore}}, {{/hasMore}}{{/allParams}}): io.gatling.http.request.builder.HttpRequestBuilder = {
    // create path and map variables
    val path = "{{path}}".replaceAllLiterally("\\{format\\}","json"){{#pathParams}}
      .replaceAllLiterally("{" + "{{baseName}}" + "}",apiInvoker.escape({{paramName}}.toString))
    {{/pathParams}}

    val contentTypes = List({{#consumes}}"{{{mediaType}}}", {{/consumes}}"application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    {{#allParams}}
    {{#required}}
    {{^isPrimitiveType}}
    if ({{paramName}} == null) throw new Exception("Missing required parameter '{{paramName}}' when calling {{classname}}->{{operationId}}")

    {{/isPrimitiveType}}
    {{/required}}
    {{/allParams}}
    {{#queryParams}}
    if(String.valueOf({{paramName}}) != "null") queryParams += "{{baseName}}" -> apiInvoker.serializeQueryParam({{paramName}})
    {{/queryParams}}
    {{#headerParams}}

    headerParams += "{{baseName}}" -> {{paramName}}
    {{/headerParams}}

    var postBody: AnyRef = {{#bodyParam}}{{paramName}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}}

    apiInvoker.invokeApi("{{operationId}}", basePath, path, "{{httpMethod}}", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType)
  }
  {{/operation}}
}
{{/operations}}

{{#operations}}
object {{classname}} {
  {{#operation}}
  {{#returnType}}

  def {{operationId}}Result[X](transformation: ({{returnType}}) => X = identity[{{returnType}}](_)): ValidatorCheckBuilder[HttpCheck,Response,String,X] = {
    val parser = (s: String) => ApiInvoker.deserialize(s, "{{returnContainer}}", classOf[{{returnBaseType}}]).asInstanceOf[{{returnType}}]
    bodyString
      .transform(parser)
      .transform(transformation)
  }
  {{/returnType}}
  {{/operation}}
}
{{/operations}}
