/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.api

import io.swagger.client.model.Order
import io.swagger.client.ApiInvoker
import io.swagger.client.ApiException

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap
import io.gatling.core.Predef._
import io.gatling.http.Predef._
import io.gatling.core.check.ValidatorCheckBuilder
import io.gatling.http.check.HttpCheck
import io.gatling.http.response.Response

class StoreApi(val defBasePath: String = "http://petstore.swagger.io/v2",
                        defApiInvoker: ApiInvoker = ApiInvoker) {
  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value 

  /**
   * Delete purchase order by ID
   * For valid response try integer IDs with value &lt; 1000. Anything above 1000 or nonintegers will generate API errors
   * @param orderId ID of the order that needs to be deleted 
   * @return void
   */
  def deleteOrder (orderId: String): io.gatling.http.request.builder.HttpRequestBuilder = {
    // create path and map variables
    val path = "/store/order/{orderId}".replaceAllLiterally("\\{format\\}","json")
      .replaceAllLiterally("{" + "orderId" + "}",apiInvoker.escape(orderId.toString))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]


    var postBody: AnyRef = null

    apiInvoker.invokeApi("deleteOrder", basePath, path, "DELETE", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType)
  }

  /**
   * Returns pet inventories by status
   * Returns a map of status codes to quantities
   * @return Map[String, Integer]
   */
  def getInventory (): io.gatling.http.request.builder.HttpRequestBuilder = {
    // create path and map variables
    val path = "/store/inventory".replaceAllLiterally("\\{format\\}","json")
    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]


    var postBody: AnyRef = null

    apiInvoker.invokeApi("getInventory", basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType)
  }

  /**
   * Find purchase order by ID
   * For valid response try integer IDs with value &lt;&#x3D; 5 or &gt; 10. Other values will generated exceptions
   * @param orderId ID of pet that needs to be fetched 
   * @return Order
   */
  def getOrderById (orderId: Long): io.gatling.http.request.builder.HttpRequestBuilder = {
    // create path and map variables
    val path = "/store/order/{orderId}".replaceAllLiterally("\\{format\\}","json")
      .replaceAllLiterally("{" + "orderId" + "}",apiInvoker.escape(orderId.toString))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]


    var postBody: AnyRef = null

    apiInvoker.invokeApi("getOrderById", basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType)
  }

  /**
   * Place an order for a pet
   * 
   * @param body order placed for purchasing the pet 
   * @return Order
   */
  def placeOrder (body: Order): io.gatling.http.request.builder.HttpRequestBuilder = {
    // create path and map variables
    val path = "/store/order".replaceAllLiterally("\\{format\\}","json")
    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling StoreApi->placeOrder")


    var postBody: AnyRef = body

    apiInvoker.invokeApi("placeOrder", basePath, path, "POST", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType)
  }
}

object StoreApi {

  def getInventoryResult[X](transformation: (Map[String, Integer]) => X = identity[Map[String, Integer]](_)): ValidatorCheckBuilder[HttpCheck,Response,String,X] = {
    val parser = (s: String) => ApiInvoker.deserialize(s, "map", classOf[Integer]).asInstanceOf[Map[String, Integer]]
    bodyString
      .transform(parser)
      .transform(transformation)
  }

  def getOrderByIdResult[X](transformation: (Order) => X = identity[Order](_)): ValidatorCheckBuilder[HttpCheck,Response,String,X] = {
    val parser = (s: String) => ApiInvoker.deserialize(s, "", classOf[Order]).asInstanceOf[Order]
    bodyString
      .transform(parser)
      .transform(transformation)
  }

  def placeOrderResult[X](transformation: (Order) => X = identity[Order](_)): ValidatorCheckBuilder[HttpCheck,Response,String,X] = {
    val parser = (s: String) => ApiInvoker.deserialize(s, "", classOf[Order]).asInstanceOf[Order]
    bodyString
      .transform(parser)
      .transform(transformation)
  }
}
