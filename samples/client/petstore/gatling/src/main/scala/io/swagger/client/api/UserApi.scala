/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.api

import io.swagger.client.model.User
import io.swagger.client.ApiInvoker
import io.swagger.client.ApiException

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap
import io.gatling.core.Predef._
import io.gatling.http.Predef._
import io.gatling.core.check.ValidatorCheckBuilder
import io.gatling.http.check.HttpCheck
import io.gatling.http.response.Response

class UserApi(val defBasePath: String = "http://petstore.swagger.io/v2",
                        defApiInvoker: ApiInvoker = ApiInvoker) {
  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value 

  /**
   * Create user
   * This can only be done by the logged in user.
   * @param body Created user object 
   * @return void
   */
  def createUser (body: User): io.gatling.http.request.builder.HttpRequestBuilder = {
    // create path and map variables
    val path = "/user".replaceAllLiterally("\\{format\\}","json")
    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling UserApi->createUser")


    var postBody: AnyRef = body

    apiInvoker.invokeApi("createUser", basePath, path, "POST", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType)
  }

  /**
   * Creates list of users with given input array
   * 
   * @param body List of user object 
   * @return void
   */
  def createUsersWithArrayInput (body: List[User]): io.gatling.http.request.builder.HttpRequestBuilder = {
    // create path and map variables
    val path = "/user/createWithArray".replaceAllLiterally("\\{format\\}","json")
    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling UserApi->createUsersWithArrayInput")


    var postBody: AnyRef = body

    apiInvoker.invokeApi("createUsersWithArrayInput", basePath, path, "POST", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType)
  }

  /**
   * Creates list of users with given input array
   * 
   * @param body List of user object 
   * @return void
   */
  def createUsersWithListInput (body: List[User]): io.gatling.http.request.builder.HttpRequestBuilder = {
    // create path and map variables
    val path = "/user/createWithList".replaceAllLiterally("\\{format\\}","json")
    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling UserApi->createUsersWithListInput")


    var postBody: AnyRef = body

    apiInvoker.invokeApi("createUsersWithListInput", basePath, path, "POST", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType)
  }

  /**
   * Delete user
   * This can only be done by the logged in user.
   * @param username The name that needs to be deleted 
   * @return void
   */
  def deleteUser (username: String): io.gatling.http.request.builder.HttpRequestBuilder = {
    // create path and map variables
    val path = "/user/{username}".replaceAllLiterally("\\{format\\}","json")
      .replaceAllLiterally("{" + "username" + "}",apiInvoker.escape(username.toString))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]


    var postBody: AnyRef = null

    apiInvoker.invokeApi("deleteUser", basePath, path, "DELETE", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType)
  }

  /**
   * Get user by user name
   * 
   * @param username The name that needs to be fetched. Use user1 for testing.  
   * @return User
   */
  def getUserByName (username: String): io.gatling.http.request.builder.HttpRequestBuilder = {
    // create path and map variables
    val path = "/user/{username}".replaceAllLiterally("\\{format\\}","json")
      .replaceAllLiterally("{" + "username" + "}",apiInvoker.escape(username.toString))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]


    var postBody: AnyRef = null

    apiInvoker.invokeApi("getUserByName", basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType)
  }

  /**
   * Logs user into the system
   * 
   * @param username The user name for login 
   * @param password The password for login in clear text 
   * @return String
   */
  def loginUser (username: String, password: String): io.gatling.http.request.builder.HttpRequestBuilder = {
    // create path and map variables
    val path = "/user/login".replaceAllLiterally("\\{format\\}","json")
    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if(String.valueOf(username) != "null") queryParams += "username" -> apiInvoker.serializeQueryParam(username)
    if(String.valueOf(password) != "null") queryParams += "password" -> apiInvoker.serializeQueryParam(password)

    var postBody: AnyRef = null

    apiInvoker.invokeApi("loginUser", basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType)
  }

  /**
   * Logs out current logged in user session
   * 
   * @return void
   */
  def logoutUser (): io.gatling.http.request.builder.HttpRequestBuilder = {
    // create path and map variables
    val path = "/user/logout".replaceAllLiterally("\\{format\\}","json")
    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]


    var postBody: AnyRef = null

    apiInvoker.invokeApi("logoutUser", basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType)
  }

  /**
   * Updated user
   * This can only be done by the logged in user.
   * @param username name that need to be deleted 
   * @param body Updated user object 
   * @return void
   */
  def updateUser (username: String, body: User): io.gatling.http.request.builder.HttpRequestBuilder = {
    // create path and map variables
    val path = "/user/{username}".replaceAllLiterally("\\{format\\}","json")
      .replaceAllLiterally("{" + "username" + "}",apiInvoker.escape(username.toString))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    // query params
    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling UserApi->updateUser")


    var postBody: AnyRef = body

    apiInvoker.invokeApi("updateUser", basePath, path, "PUT", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType)
  }
}

object UserApi {

  def getUserByNameResult[X](transformation: (User) => X = identity[User](_)): ValidatorCheckBuilder[HttpCheck,Response,String,X] = {
    val parser = (s: String) => ApiInvoker.deserialize(s, "", classOf[User]).asInstanceOf[User]
    bodyString
      .transform(parser)
      .transform(transformation)
  }

  def loginUserResult[X](transformation: (String) => X = identity[String](_)): ValidatorCheckBuilder[HttpCheck,Response,String,X] = {
    val parser = (s: String) => ApiInvoker.deserialize(s, "", classOf[String]).asInstanceOf[String]
    bodyString
      .transform(parser)
      .transform(transformation)
  }
}
